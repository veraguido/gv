<?php

use Gvera\Helpers\validation\ValidationService;
use Gvera\Models\User;
use Gvera\Models\UserRole;
use Doctrine\ORM\EntityRepository;
use Gvera\Helpers\session\Session;
use Gvera\Helpers\entities\GvEntityManager;
use PHPUnit\Framework\TestCase;

class UserServiceTest extends TestCase
{

    private $userService;
    /**
     * @test
     */
    private $user;
    public function validateEmail()
    {
        $invalidEmail = 'test';
        $this->assertFalse($this->userService->validateEmail($invalidEmail));
        $validEmail = 'test@test.com';
        $this->assertTrue($this->userService->validateEmail($validEmail));
    }

    public function setUp():void
    {
        $repo = $this->createMock(EntityRepository::class);

        $gvEntityManager = $this->createMock(GvEntityManager::class);
        $gvEntityManager->expects($this->any())
            ->method('getRepository')
            ->willReturn($repo);

        $session = $this->createMock(Session::class);
        $session->expects($this->any())
            ->method('set')
            ->with($this->isType('string'), $this->isType('array'))
            ->willReturn(true);

        $this->userService = new \Gvera\Services\UserService($gvEntityManager, $session, new ValidationService());

        $role = new UserRole($gvEntityManager);
        $role->setName("testRole");
        $role->setRolePriority(5);

        $user = new User();
        $user->setEmail("asd@aasd.com");
        $user->setUsername("test");
        $user->setRole($role);

        $this->user = $user;
        $passHash = $this->userService->generatePassword('test');
        $user->setPassword($passHash);

        $repo->expects($this->any())
            ->method('findOneBy')
            ->willReturn($user);

        $session->expects($this->any())
            ->method('get')
            ->with('user')
            ->willReturn(['role' => $role->getRolePriority(), 'username' => $user->getUsername()]);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function generateAndValidatePassword()
    {
        $passHash = $this->userService->generatePassword('password');
        $this->assertNotNull($passHash);

        $this->assertTrue($this->userService->validatePassword('password', $passHash));
    }

    /**
     * @test
     */
    public function login()
    {
        $this->expectException(Exception::class);


        $user = new User();
        $user->setEmail("asd@aasd.com");
        $user->setUsername("test");
        $passHash = $this->userService->generatePassword('test');
        $user->setPassword($passHash);


        $repo = $this->createMock(EntityRepository::class);
        $repo->expects($this->any())
            ->method('findOneBy')
            ->willReturn($user);

        $gvEntityManager = $this->createMock(GvEntityManager::class);
        $gvEntityManager->expects($this->any())
            ->method('getRepository')
            ->willReturn($repo);

        $role = new UserRole($gvEntityManager);
        $role->setName("testRole");
        $role->setRolePriority(5);

        $user->setRole($role);

        $session = $this->createMock(Session::class);
        $session->expects($this->any())
            ->method('set')
            ->with($this->isType('string'), $this->isType('array'))
            ->willReturn(true);
        
        $session->expects($this->any())
            ->method('get')
            ->with('user')
            ->willReturn(['role' => $role->getRolePriority(), 'username' => $user->getUsername()]);
            

        $this->userService->entityManager = $gvEntityManager;
        $this->userService->session = $session;

        $this->userService->login($user->getUsername(), $passHash);
        $this->assertTrue($session->get('user')['username'] === $user->getUsername());
        $this->assertTrue($this->userService->getUserRole() === 5);
        $this->userService->login($user->getUsername(), 'failedpass');

    }

    /**
     * @test
     */
    public function logout()
    {
        $session = $this->createMock(Session::class);
        $session->expects($this->any())
            ->method('unsetByKey')
            ->with('user')
            ->willReturn(true);
        
        $session->expects($this->any())
            ->method('get')
            ->with('user')
            ->willReturn(null);

        $this->userService->session = $session;

        $this->userService->logout();

        $this->assertFalse($this->userService->isUserLoggedIn());
    }

    public function testUserAuthorization()
    {

        $repo = $this->createMock(EntityRepository::class);

        $roleAction = new \Gvera\Models\UserRoleAction();
        $roleAction->setActionName('test');

        $repo->expects($this->any())
            ->method('findOneBy')
            ->willReturn($roleAction);

        $gvEntityManager = $this->createMock(GvEntityManager::class);
        $gvEntityManager->expects($this->any())
            ->method('getRepository')
            ->willReturn($repo);


        $role = new UserRole($gvEntityManager);
        $role->setName("testRole");
        $role->setRolePriority(5);
        $role->addRoleAction($roleAction);


        $user = new User();
        $user->setEmail("asd@aasd.com");
        $user->setUsername("test");
        $user->setRole($role);


        $this->assertTrue($this->userService->userCan($user, 'test'));
        $this->assertFalse($this->userService->userCan($user, 'not_test'));
    }
}